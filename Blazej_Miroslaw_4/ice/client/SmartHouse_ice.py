# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `SmartHouse.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHouse
_M_SmartHouse = Ice.openModule('SmartHouse')
__name__ = 'SmartHouse'

if 'Color' not in _M_SmartHouse.__dict__:
    _M_SmartHouse.Color = Ice.createTempClass()
    class Color(object):
        def __init__(self, r=0.0, g=0.0, b=0.0):
            self.r = r
            self.g = g
            self.b = b

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHouse.Color):
                return NotImplemented
            else:
                if self.r != other.r:
                    return False
                if self.g != other.g:
                    return False
                if self.b != other.b:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouse._t_Color)

        __repr__ = __str__

    _M_SmartHouse._t_Color = IcePy.defineStruct('::SmartHouse::Color', Color, (), (
        ('r', (), IcePy._t_float),
        ('g', (), IcePy._t_float),
        ('b', (), IcePy._t_float)
    ))

    _M_SmartHouse.Color = Color
    del Color

if 'Range' not in _M_SmartHouse.__dict__:
    _M_SmartHouse.Range = Ice.createTempClass()
    class Range(object):
        def __init__(self, min=0.0, max=0.0):
            self.min = min
            self.max = max

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHouse.Range):
                return NotImplemented
            else:
                if self.min != other.min:
                    return False
                if self.max != other.max:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouse._t_Range)

        __repr__ = __str__

    _M_SmartHouse._t_Range = IcePy.defineStruct('::SmartHouse::Range', Range, (), (
        ('min', (), IcePy._t_float),
        ('max', (), IcePy._t_float)
    ))

    _M_SmartHouse.Range = Range
    del Range

if 'Mode' not in _M_SmartHouse.__dict__:
    _M_SmartHouse.Mode = Ice.createTempClass()
    class Mode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Mode.Blink = Mode("Blink", 0)
    Mode.Sine = Mode("Sine", 1)
    Mode.Still = Mode("Still", 2)
    Mode._enumerators = { 0:Mode.Blink, 1:Mode.Sine, 2:Mode.Still }

    _M_SmartHouse._t_Mode = IcePy.defineEnum('::SmartHouse::Mode', Mode, (), Mode._enumerators)

    _M_SmartHouse.Mode = Mode
    del Mode

if 'InvaildColorException' not in _M_SmartHouse.__dict__:
    _M_SmartHouse.InvaildColorException = Ice.createTempClass()
    class InvaildColorException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHouse::InvaildColorException'

    _M_SmartHouse._t_InvaildColorException = IcePy.defineException('::SmartHouse::InvaildColorException', InvaildColorException, (), False, None, ())
    InvaildColorException._ice_type = _M_SmartHouse._t_InvaildColorException

    _M_SmartHouse.InvaildColorException = InvaildColorException
    del InvaildColorException

if 'UnsupportedFrequency' not in _M_SmartHouse.__dict__:
    _M_SmartHouse.UnsupportedFrequency = Ice.createTempClass()
    class UnsupportedFrequency(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHouse::UnsupportedFrequency'

    _M_SmartHouse._t_UnsupportedFrequency = IcePy.defineException('::SmartHouse::UnsupportedFrequency', UnsupportedFrequency, (), False, None, ())
    UnsupportedFrequency._ice_type = _M_SmartHouse._t_UnsupportedFrequency

    _M_SmartHouse.UnsupportedFrequency = UnsupportedFrequency
    del UnsupportedFrequency

_M_SmartHouse._t_LightBulb = IcePy.defineValue('::SmartHouse::LightBulb', Ice.Value, -1, (), False, True, None, ())

if 'LightBulbPrx' not in _M_SmartHouse.__dict__:
    _M_SmartHouse.LightBulbPrx = Ice.createTempClass()
    class LightBulbPrx(Ice.ObjectPrx):

        def getState(self, context=None):
            return _M_SmartHouse.LightBulb._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHouse.LightBulb._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.LightBulb._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHouse.LightBulb._op_getState.end(self, _r)

        def setState(self, newState, context=None):
            return _M_SmartHouse.LightBulb._op_setState.invoke(self, ((newState, ), context))

        def setStateAsync(self, newState, context=None):
            return _M_SmartHouse.LightBulb._op_setState.invokeAsync(self, ((newState, ), context))

        def begin_setState(self, newState, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.LightBulb._op_setState.begin(self, ((newState, ), _response, _ex, _sent, context))

        def end_setState(self, _r):
            return _M_SmartHouse.LightBulb._op_setState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouse.LightBulbPrx.ice_checkedCast(proxy, '::SmartHouse::LightBulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouse.LightBulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouse::LightBulb'
    _M_SmartHouse._t_LightBulbPrx = IcePy.defineProxy('::SmartHouse::LightBulb', LightBulbPrx)

    _M_SmartHouse.LightBulbPrx = LightBulbPrx
    del LightBulbPrx

    _M_SmartHouse.LightBulb = Ice.createTempClass()
    class LightBulb(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouse::LightBulb')

        def ice_id(self, current=None):
            return '::SmartHouse::LightBulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHouse::LightBulb'

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def setState(self, newState, current=None):
            raise NotImplementedError("servant method 'setState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouse._t_LightBulbDisp)

        __repr__ = __str__

    _M_SmartHouse._t_LightBulbDisp = IcePy.defineClass('::SmartHouse::LightBulb', LightBulb, (), None, ())
    LightBulb._ice_type = _M_SmartHouse._t_LightBulbDisp

    LightBulb._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    LightBulb._op_setState = IcePy.Operation('setState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())

    _M_SmartHouse.LightBulb = LightBulb
    del LightBulb

_M_SmartHouse._t_RGBBulb = IcePy.defineValue('::SmartHouse::RGBBulb', Ice.Value, -1, (), False, True, None, ())

if 'RGBBulbPrx' not in _M_SmartHouse.__dict__:
    _M_SmartHouse.RGBBulbPrx = Ice.createTempClass()
    class RGBBulbPrx(_M_SmartHouse.LightBulbPrx):

        def getColor(self, context=None):
            return _M_SmartHouse.RGBBulb._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_SmartHouse.RGBBulb._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.RGBBulb._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_SmartHouse.RGBBulb._op_getColor.end(self, _r)

        def setColor(self, color, context=None):
            return _M_SmartHouse.RGBBulb._op_setColor.invoke(self, ((color, ), context))

        def setColorAsync(self, color, context=None):
            return _M_SmartHouse.RGBBulb._op_setColor.invokeAsync(self, ((color, ), context))

        def begin_setColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.RGBBulb._op_setColor.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_SmartHouse.RGBBulb._op_setColor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouse.RGBBulbPrx.ice_checkedCast(proxy, '::SmartHouse::RGBBulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouse.RGBBulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouse::RGBBulb'
    _M_SmartHouse._t_RGBBulbPrx = IcePy.defineProxy('::SmartHouse::RGBBulb', RGBBulbPrx)

    _M_SmartHouse.RGBBulbPrx = RGBBulbPrx
    del RGBBulbPrx

    _M_SmartHouse.RGBBulb = Ice.createTempClass()
    class RGBBulb(_M_SmartHouse.LightBulb):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouse::LightBulb', '::SmartHouse::RGBBulb')

        def ice_id(self, current=None):
            return '::SmartHouse::RGBBulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHouse::RGBBulb'

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def setColor(self, color, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouse._t_RGBBulbDisp)

        __repr__ = __str__

    _M_SmartHouse._t_RGBBulbDisp = IcePy.defineClass('::SmartHouse::RGBBulb', RGBBulb, (), None, (_M_SmartHouse._t_LightBulbDisp,))
    RGBBulb._ice_type = _M_SmartHouse._t_RGBBulbDisp

    RGBBulb._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHouse._t_Color, False, 0), ())
    RGBBulb._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHouse._t_Color, False, 0),), (), None, (_M_SmartHouse._t_InvaildColorException,))

    _M_SmartHouse.RGBBulb = RGBBulb
    del RGBBulb

_M_SmartHouse._t_StroboscopeBulb = IcePy.defineValue('::SmartHouse::StroboscopeBulb', Ice.Value, -1, (), False, True, None, ())

if 'StroboscopeBulbPrx' not in _M_SmartHouse.__dict__:
    _M_SmartHouse.StroboscopeBulbPrx = Ice.createTempClass()
    class StroboscopeBulbPrx(_M_SmartHouse.LightBulbPrx):

        def getSupportedFrequenciesRange(self, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_getSupportedFrequenciesRange.invoke(self, ((), context))

        def getSupportedFrequenciesRangeAsync(self, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_getSupportedFrequenciesRange.invokeAsync(self, ((), context))

        def begin_getSupportedFrequenciesRange(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_getSupportedFrequenciesRange.begin(self, ((), _response, _ex, _sent, context))

        def end_getSupportedFrequenciesRange(self, _r):
            return _M_SmartHouse.StroboscopeBulb._op_getSupportedFrequenciesRange.end(self, _r)

        def getFrequency(self, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_getFrequency.invoke(self, ((), context))

        def getFrequencyAsync(self, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_getFrequency.invokeAsync(self, ((), context))

        def begin_getFrequency(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_getFrequency.begin(self, ((), _response, _ex, _sent, context))

        def end_getFrequency(self, _r):
            return _M_SmartHouse.StroboscopeBulb._op_getFrequency.end(self, _r)

        def setFrequency(self, newFrequency, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_setFrequency.invoke(self, ((newFrequency, ), context))

        def setFrequencyAsync(self, newFrequency, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_setFrequency.invokeAsync(self, ((newFrequency, ), context))

        def begin_setFrequency(self, newFrequency, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_setFrequency.begin(self, ((newFrequency, ), _response, _ex, _sent, context))

        def end_setFrequency(self, _r):
            return _M_SmartHouse.StroboscopeBulb._op_setFrequency.end(self, _r)

        def setMode(self, newMode, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_setMode.invoke(self, ((newMode, ), context))

        def setModeAsync(self, newMode, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_setMode.invokeAsync(self, ((newMode, ), context))

        def begin_setMode(self, newMode, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.StroboscopeBulb._op_setMode.begin(self, ((newMode, ), _response, _ex, _sent, context))

        def end_setMode(self, _r):
            return _M_SmartHouse.StroboscopeBulb._op_setMode.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouse.StroboscopeBulbPrx.ice_checkedCast(proxy, '::SmartHouse::StroboscopeBulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouse.StroboscopeBulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouse::StroboscopeBulb'
    _M_SmartHouse._t_StroboscopeBulbPrx = IcePy.defineProxy('::SmartHouse::StroboscopeBulb', StroboscopeBulbPrx)

    _M_SmartHouse.StroboscopeBulbPrx = StroboscopeBulbPrx
    del StroboscopeBulbPrx

    _M_SmartHouse.StroboscopeBulb = Ice.createTempClass()
    class StroboscopeBulb(_M_SmartHouse.LightBulb):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouse::LightBulb', '::SmartHouse::StroboscopeBulb')

        def ice_id(self, current=None):
            return '::SmartHouse::StroboscopeBulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHouse::StroboscopeBulb'

        def getSupportedFrequenciesRange(self, current=None):
            raise NotImplementedError("servant method 'getSupportedFrequenciesRange' not implemented")

        def getFrequency(self, current=None):
            raise NotImplementedError("servant method 'getFrequency' not implemented")

        def setFrequency(self, newFrequency, current=None):
            raise NotImplementedError("servant method 'setFrequency' not implemented")

        def setMode(self, newMode, current=None):
            raise NotImplementedError("servant method 'setMode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouse._t_StroboscopeBulbDisp)

        __repr__ = __str__

    _M_SmartHouse._t_StroboscopeBulbDisp = IcePy.defineClass('::SmartHouse::StroboscopeBulb', StroboscopeBulb, (), None, (_M_SmartHouse._t_LightBulbDisp,))
    StroboscopeBulb._ice_type = _M_SmartHouse._t_StroboscopeBulbDisp

    StroboscopeBulb._op_getSupportedFrequenciesRange = IcePy.Operation('getSupportedFrequenciesRange', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHouse._t_Range, False, 0), ())
    StroboscopeBulb._op_getFrequency = IcePy.Operation('getFrequency', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    StroboscopeBulb._op_setFrequency = IcePy.Operation('setFrequency', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_SmartHouse._t_UnsupportedFrequency,))
    StroboscopeBulb._op_setMode = IcePy.Operation('setMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHouse._t_Mode, False, 0),), (), None, ())

    _M_SmartHouse.StroboscopeBulb = StroboscopeBulb
    del StroboscopeBulb

_M_SmartHouse._t_Thermometer = IcePy.defineValue('::SmartHouse::Thermometer', Ice.Value, -1, (), False, True, None, ())

if 'ThermometerPrx' not in _M_SmartHouse.__dict__:
    _M_SmartHouse.ThermometerPrx = Ice.createTempClass()
    class ThermometerPrx(Ice.ObjectPrx):

        def getTemperature(self, context=None):
            return _M_SmartHouse.Thermometer._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_SmartHouse.Thermometer._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.Thermometer._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_SmartHouse.Thermometer._op_getTemperature.end(self, _r)

        def getSuportedRange(self, context=None):
            return _M_SmartHouse.Thermometer._op_getSuportedRange.invoke(self, ((), context))

        def getSuportedRangeAsync(self, context=None):
            return _M_SmartHouse.Thermometer._op_getSuportedRange.invokeAsync(self, ((), context))

        def begin_getSuportedRange(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.Thermometer._op_getSuportedRange.begin(self, ((), _response, _ex, _sent, context))

        def end_getSuportedRange(self, _r):
            return _M_SmartHouse.Thermometer._op_getSuportedRange.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouse.ThermometerPrx.ice_checkedCast(proxy, '::SmartHouse::Thermometer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouse.ThermometerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouse::Thermometer'
    _M_SmartHouse._t_ThermometerPrx = IcePy.defineProxy('::SmartHouse::Thermometer', ThermometerPrx)

    _M_SmartHouse.ThermometerPrx = ThermometerPrx
    del ThermometerPrx

    _M_SmartHouse.Thermometer = Ice.createTempClass()
    class Thermometer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouse::Thermometer')

        def ice_id(self, current=None):
            return '::SmartHouse::Thermometer'

        @staticmethod
        def ice_staticId():
            return '::SmartHouse::Thermometer'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def getSuportedRange(self, current=None):
            raise NotImplementedError("servant method 'getSuportedRange' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouse._t_ThermometerDisp)

        __repr__ = __str__

    _M_SmartHouse._t_ThermometerDisp = IcePy.defineClass('::SmartHouse::Thermometer', Thermometer, (), None, ())
    Thermometer._ice_type = _M_SmartHouse._t_ThermometerDisp

    Thermometer._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Thermometer._op_getSuportedRange = IcePy.Operation('getSuportedRange', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHouse._t_Range, False, 0), ())

    _M_SmartHouse.Thermometer = Thermometer
    del Thermometer

_M_SmartHouse._t_Bulbulator = IcePy.defineValue('::SmartHouse::Bulbulator', Ice.Value, -1, (), False, True, None, ())

if 'BulbulatorPrx' not in _M_SmartHouse.__dict__:
    _M_SmartHouse.BulbulatorPrx = Ice.createTempClass()
    class BulbulatorPrx(Ice.ObjectPrx):

        def mumble(self, context=None):
            return _M_SmartHouse.Bulbulator._op_mumble.invoke(self, ((), context))

        def mumbleAsync(self, context=None):
            return _M_SmartHouse.Bulbulator._op_mumble.invokeAsync(self, ((), context))

        def begin_mumble(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouse.Bulbulator._op_mumble.begin(self, ((), _response, _ex, _sent, context))

        def end_mumble(self, _r):
            return _M_SmartHouse.Bulbulator._op_mumble.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouse.BulbulatorPrx.ice_checkedCast(proxy, '::SmartHouse::Bulbulator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouse.BulbulatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouse::Bulbulator'
    _M_SmartHouse._t_BulbulatorPrx = IcePy.defineProxy('::SmartHouse::Bulbulator', BulbulatorPrx)

    _M_SmartHouse.BulbulatorPrx = BulbulatorPrx
    del BulbulatorPrx

    _M_SmartHouse.Bulbulator = Ice.createTempClass()
    class Bulbulator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouse::Bulbulator')

        def ice_id(self, current=None):
            return '::SmartHouse::Bulbulator'

        @staticmethod
        def ice_staticId():
            return '::SmartHouse::Bulbulator'

        def mumble(self, current=None):
            raise NotImplementedError("servant method 'mumble' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouse._t_BulbulatorDisp)

        __repr__ = __str__

    _M_SmartHouse._t_BulbulatorDisp = IcePy.defineClass('::SmartHouse::Bulbulator', Bulbulator, (), None, ())
    Bulbulator._ice_type = _M_SmartHouse._t_BulbulatorDisp

    Bulbulator._op_mumble = IcePy.Operation('mumble', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHouse.Bulbulator = Bulbulator
    del Bulbulator

# End of module SmartHouse
